(function(){"use strict";const k="PersonWorldCupDataDB",g="persons";let w=!1,d=null,u=null;const D=()=>new Promise((s,e)=>{if(d){s(d);return}const r=indexedDB.open(k,1);r.onupgradeneeded=t=>{const o=t.target.result;o.objectStoreNames.contains(g)||o.createObjectStore(g,{keyPath:"id"})},r.onsuccess=t=>{d=t.target.result,s(d)},r.onerror=t=>{console.error("Worker: IndexedDB error:",t.target.error),e(t.target.error)}}),b=async()=>{const s=await D();return new Promise((e,r)=>{const a=s.transaction([g],"readonly").objectStore(g).getAll();a.onsuccess=()=>{e(a.result)},a.onerror=n=>{console.error("Worker: Error reading from IndexDB:",n.target.error),r(n.target.error)}})},h=async s=>{const e=await D();return new Promise((r,t)=>{const o=e.transaction([g],"readwrite"),a=o.objectStore(g);o.oncomplete=()=>{console.log("Worker: All persons written to IndexDB."),r()},o.onerror=n=>{console.error("Worker: Error writing to IndexDB:",n.target.error),t(n.target.error)},s.forEach(n=>{a.put(n)})})},W=()=>new Promise((s,e)=>{d&&(d.close(),d=null);const r=indexedDB.deleteDatabase(k);r.onsuccess=()=>{console.log("Worker: IndexedDB deleted successfully."),s()},r.onerror=t=>{const o=t.target.error;console.error("Worker: Error deleting IndexedDB:",o),e(o)},r.onblocked=()=>{console.warn("Worker: Deletion blocked. Close all connections to the database."),e(new Error("Database deletion blocked."))}});self.onmessage=async s=>{if(w){console.warn("Worker: Ignoring message, another operation is in progress.");return}if(w=!0,s.data.type==="loadData")try{let e;if(u)e=u;else{if(console.log("Worker: Checking IndexedDB for raw data..."),e=await b(),e.length===0){console.log("Worker: Data not found. Spawning parallel data generators...");const c=performance.now(),l=5e5,p=l/2,y=new Promise(f=>{const i=new Worker(new URL("/graphics-web-services-workers/assets/data-generator-pie-BhxYFx_Z.js",self.location.href));i.postMessage({count:p,startId:1}),i.onmessage=m=>{console.log("Worker: Received data from worker 1."),f(m.data),i.terminate()}}),B=new Promise(f=>{const i=new Worker(new URL("/graphics-web-services-workers/assets/data-generator-pie-BhxYFx_Z.js",self.location.href));i.postMessage({count:l-p,startId:p+1}),i.onmessage=m=>{console.log("Worker: Received data from worker 2."),f(m.data),i.terminate()}}),[P,x]=await Promise.all([y,B]);e=[...P,...x],console.log(`Worker: Data combined in ${performance.now()-c}ms. Writing to IndexDB...`),await h(e),console.log(`Worker: ${e.length} records combined and saved to IndexedDB.`)}else console.log(`Worker: ${e.length} records loaded from IndexedDB.`);u=e}const r=new Map;let t=0;e.forEach(c=>{const l=c.country;r.has(l)||r.set(l,{population:0,totalPets:0});const p=r.get(l);p.population++,p.totalPets+=c.pets,t+=c.pets});const o=[],a=[];Array.from(r.keys()).sort().forEach(c=>{const l=r.get(c);o.push(c),a.push(l.population)}),console.log(`Worker: Data processed. Aggregated into ${o.length} unique countries. Sending results.`),self.postMessage({type:"dataReady",labels:o,values:a,originalRecordCount:e.length})}catch(e){console.error("Worker: Error processing data:",e),self.postMessage({type:"error",message:e.message})}else if(s.data.type==="clearData"){console.log("Worker: Clearing IndexedDB...");try{await W(),u=null,self.postMessage({type:"dataCleared"})}catch(e){console.error("Worker: Error during cleanup process:",e),self.postMessage({type:"error",message:`Error during cleanup process: ${e.message}`})}}w=!1}})();
