(function(){"use strict";const D="PersonWorldCupDataDB",g="persons";let f=!1,l=null,u=null;const k=()=>new Promise((t,e)=>{if(l){t(l);return}const r=indexedDB.open(D,1);r.onupgradeneeded=o=>{const s=o.target.result;s.objectStoreNames.contains(g)||s.createObjectStore(g,{keyPath:"id"})},r.onsuccess=o=>{l=o.target.result,t(l)},r.onerror=o=>{console.error("Worker: IndexedDB error:",o.target.error),e(o.target.error)}}),b=async()=>{const t=await k();return new Promise((e,r)=>{const n=t.transaction([g],"readonly").objectStore(g).getAll();n.onsuccess=()=>{e(n.result)},n.onerror=c=>{console.error("Worker: Error reading from IndexDB:",c.target.error),r(c.target.error)}})},h=async t=>{const e=await k();return new Promise((r,o)=>{const s=e.transaction([g],"readwrite"),n=s.objectStore(g);s.oncomplete=()=>{console.log("Worker: All persons written to IndexDB."),r()},s.onerror=c=>{console.error("Worker: Error writing to IndexDB:",c.target.error),o(c.target.error)},t.forEach(c=>{n.put(c)})})},W=()=>new Promise((t,e)=>{l&&(l.close(),l=null);const r=indexedDB.deleteDatabase(D);r.onsuccess=()=>{console.log("Worker: IndexedDB deleted successfully."),t()},r.onerror=o=>{const s=o.target.error;console.error("Worker: Error deleting IndexedDB:",s),e(s)},r.onblocked=()=>{console.warn("Worker: Deletion blocked. Close all connections to the database."),e(new Error("Database deletion blocked."))}});self.onmessage=async t=>{if(f){console.warn("Worker: Ignoring message, another operation is in progress.");return}if(f=!0,t.data.type==="loadData")try{let e;if(u)e=u;else{if(console.log("Worker: Checking IndexedDB for raw data..."),e=await b(),e.length===0){console.log("Worker: Data not found. Spawning parallel data generators...");const d=performance.now(),a=5e5,p=a/2,y=new Promise(w=>{const i=new Worker(new URL("/graphics-web-services-workers/assets/data-generator-pie-DJVU62Af.js",self.location.href));i.postMessage({count:p,startId:1}),i.onmessage=m=>{console.log("Worker: Received data from worker 1."),w(m.data),i.terminate()}}),B=new Promise(w=>{const i=new Worker(new URL("/graphics-web-services-workers/assets/data-generator-pie-DJVU62Af.js",self.location.href));i.postMessage({count:a-p,startId:p+1}),i.onmessage=m=>{console.log("Worker: Received data from worker 2."),w(m.data),i.terminate()}}),[I,P]=await Promise.all([y,B]);e=[...I,...P],console.log(`Worker: Data combined in ${performance.now()-d}ms. Writing to IndexDB...`),await h(e),console.log(`Worker: ${e.length} records combined and saved to IndexedDB.`)}else console.log(`Worker: ${e.length} records loaded from IndexedDB.`);u=e}const r=new Map;e.forEach(d=>{const a=d.country;r.has(a)||r.set(a,{population:0,color:d.color});const p=r.get(a);p.population++});const o=[],s=[],n=[];Array.from(r.keys()).sort().forEach(d=>{const a=r.get(d);o.push(d),s.push(a.population),n.push(a.color)}),console.log(`Worker: Data processed. Aggregated into ${o.length} unique countries. Sending results.`),self.postMessage({type:"dataReady",labels:o,values:s,colors:n,originalRecordCount:e.length})}catch(e){console.error("Worker: Error processing data:",e),self.postMessage({type:"error",message:e.message})}else if(t.data.type==="clearData"){console.log("Worker: Clearing IndexedDB...");try{await W(),u=null,self.postMessage({type:"dataCleared"})}catch(e){console.error("Worker: Error during cleanup process:",e),self.postMessage({type:"error",message:`Error during cleanup process: ${e.message}`})}}f=!1}})();
