(function(){"use strict";self.onmessage=async c=>{if(c.data.type==="loadData"){const g=c.data.payload,a=c.data.dataType;try{console.log(`Worker: Starting to fetch raw data from ${g} for ${a} chart.`);const e=await fetch(g);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const l=await e.json();console.log(`Worker: Fetched ${l.length} raw person records.`);const o=new Map;let p=0;l.forEach(s=>{const t=s.country;o.has(t)||o.set(t,{population:0,totalPets:0});const n=o.get(t);n.population++,n.totalPets+=s.pets,p+=s.pets});const i=[],r=[];Array.from(o.keys()).sort().forEach(s=>{const t=o.get(s);if(i.push(s),a==="population")r.push(t.population);else if(a==="pets")r.push(t.totalPets);else if(a==="petsPercentage"){const n=p>0?t.totalPets/p*100:0;r.push(parseFloat(n.toFixed(2)))}}),console.log(`Worker: Data processed. Aggregated into ${i.length} unique countries. Sending results back.`),self.postMessage({type:"dataReady",labels:i,values:r,originalRecordCount:l.length})}catch(e){console.error("Worker: Error processing data:",e),self.postMessage({type:"error",message:e.message})}}}})();
