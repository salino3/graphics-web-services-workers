(function(){"use strict";const k="PersonDataDB",p="persons";let f=!1,i=null,u=null;const D=()=>new Promise((s,r)=>{if(i){s(i);return}const e=indexedDB.open(k,1);e.onupgradeneeded=o=>{const t=o.target.result;t.objectStoreNames.contains(p)||t.createObjectStore(p,{keyPath:"id"})},e.onsuccess=o=>{i=o.target.result,s(i)},e.onerror=o=>{console.error("Worker: IndexedDB error:",o.target.error),r(o.target.error)}}),h=async()=>{const s=await D();return new Promise((r,e)=>{const c=s.transaction([p],"readonly").objectStore(p).getAll();c.onsuccess=()=>{r(c.result)},c.onerror=a=>{console.error("Worker: Error reading from IndexDB:",a.target.error),e(a.target.error)}})},b=async s=>{const r=await D();return new Promise((e,o)=>{const t=r.transaction([p],"readwrite"),c=t.objectStore(p);t.oncomplete=()=>{console.log("Worker: All persons written to IndexDB."),e()},t.onerror=a=>{console.error("Worker: Error writing to IndexDB:",a.target.error),o(a.target.error)},s.forEach(a=>{c.put(a)})})},y=()=>new Promise((s,r)=>{i&&(i.close(),i=null);const e=indexedDB.deleteDatabase(k);e.onsuccess=()=>{console.log("Worker: IndexedDB deleted successfully."),s()},e.onerror=o=>{const t=o.target.error;console.error("Worker: Error deleting IndexedDB:",t),r(t)},e.onblocked=()=>{console.warn("Worker: Deletion blocked. Close all connections to the database."),r(new Error("Database deletion blocked."))}});self.onmessage=async s=>{if(f){console.warn("Worker: Ignoring message, another operation is in progress.");return}if(f=!0,s.data.type==="loadData"){const r=s.data.dataType;try{let e;if(u)e=u,console.log(`Worker: Using in-memory cached data for ${r}.`);else{if(console.log("Worker: Checking IndexedDB for raw data..."),e=await h(),e.length===0){console.log("Worker: Data not found. Spawning parallel data generators...");const l=performance.now(),n=5e5,d=n/2,W=new Promise(w=>{const g=new Worker(new URL("/graphics-web-services-workers/assets/data-generator-Bh-7_DMJ.js",self.location.href));g.postMessage({count:d,startId:1}),g.onmessage=m=>{console.log("Worker: Received data from worker 1."),w(m.data),g.terminate()}}),P=new Promise(w=>{const g=new Worker(new URL("/graphics-web-services-workers/assets/data-generator-Bh-7_DMJ.js",self.location.href));g.postMessage({count:n-d,startId:d+1}),g.onmessage=m=>{console.log("Worker: Received data from worker 2."),w(m.data),g.terminate()}}),[B,I]=await Promise.all([W,P]);e=[...B,...I],console.log(`Worker: Data combined in ${performance.now()-l}ms. Writing to IndexDB...`),await b(e),console.log(`Worker: ${e.length} records combined and saved to IndexedDB.`)}else console.log(`Worker: ${e.length} records loaded from IndexedDB.`);u=e}const o=new Map;let t=0;e.forEach(l=>{const n=l.country;o.has(n)||o.set(n,{population:0,totalPets:0});const d=o.get(n);d.population++,d.totalPets+=l.pets,t+=l.pets});const c=[],a=[];Array.from(o.keys()).sort().forEach(l=>{const n=o.get(l);if(c.push(l),r==="population")a.push(n.population);else if(r==="pets")a.push(n.totalPets);else if(r==="petsPercentage"){const d=t>0?n.totalPets/t*100:0;a.push(parseFloat(d.toFixed(2)))}}),console.log(`Worker: Data processed. Aggregated into ${c.length} unique countries. Sending results.`),self.postMessage({type:"dataReady",labels:c,values:a,originalRecordCount:e.length,dataType:r})}catch(e){console.error("Worker: Error processing data:",e),self.postMessage({type:"error",message:e.message})}}else if(s.data.type==="clearData"){console.log("Worker: Clearing IndexedDB...");try{await y(),u=null,self.postMessage({type:"dataCleared"})}catch(r){console.error("Worker: Error during cleanup process:",r),self.postMessage({type:"error",message:`Error during cleanup process: ${r.message}`})}}f=!1}})();
