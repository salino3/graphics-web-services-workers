const fs = require("fs");
const path = require("path");

// Define the output folder of your project.
const distDir = "dist";
// Set the base URL prefix for your GitHub Pages project.
const BASE_URL_PREFIX = "/graphics-web-services-workers/";

// This recursive function finds all files in a directory.
function getFiles(dir, files = []) {
  const items = fs.readdirSync(dir, { withFileTypes: true });

  for (const item of items) {
    const itemPath = path.join(dir, item.name);
    if (item.isDirectory()) {
      // Ignore the 'node_modules' folder and any others you don't want to cache.
      if (item.name === "node_modules") continue;
      // Traverse subdirectories.
      getFiles(itemPath, files);
    } else {
      // Ignore the temporary sw.js file to avoid an infinite loop.
      if (item.name === "sw.js") continue;
      files.push(itemPath);
    }
  }

  return files;
}

// Get the complete list of files in the 'dist' folder.
const allFiles = getFiles(distDir);

// Prepare the URL array for the Service Worker.
const urlsToCache = allFiles.map((file) => {
  // Remove the 'dist/' folder from the beginning of the path.
  const relativePath = file.substring(distDir.length + 1);
  return `${BASE_URL_PREFIX}${relativePath}`;
});

// The base content of your Service Worker with the correct caching logic.
const swContent = `
// Cache name, be sure to change it if there are updates.
const CACHE_NAME = 'my-cache-v1';

// List of files to precache automatically, generated by the script.
const urlsToCache = ${JSON.stringify(urlsToCache, null, 2)};

// Install event: precaches all essential files.
self.addEventListener('install', (event) => {
  console.log('Service Worker: Install event.');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Cache opened. Preloading files...');
        return cache.addAll(urlsToCache)
          .then(() => {
            console.log('Files successfully preloaded.');
            return self.skipWaiting();
          })
          .catch((error) => {
            console.error('Failed to preload some files:', error);
          });
      })
  );
});

// Activate event: cleans up old caches.
self.addEventListener('activate', (event) => {
  console.log('Service Worker: Activate event.');
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            console.log(\`Deleting old cache: \${cacheName}\`);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      return self.clients.claim();
    })
  );
});

// Fetch event: intercepts all requests.
self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request)
      .then((cachedResponse) => {
        // "Cache First" strategy: returns the resource if it's in the cache.
        if (cachedResponse) {
          console.log(\`Serving from cache: \${event.request.url}\`);
          return cachedResponse;
        }

        // If not in cache, we try to get it from the network.
        console.log(\`Resource not found in cache, requesting from network: \${event.request.url}\`);
        return fetch(event.request)
          .then((networkResponse) => {
            // If the network is successful, we save it in the cache for the future.
            return caches.open(CACHE_NAME).then((cache) => {
              cache.put(event.request, networkResponse.clone());
              return networkResponse;
            });
          })
          .catch((error) => {
            // If the network fails (no connection), we return a "fallback".
            // For URLs that are not in the cache, we return 404.html.
            console.log(\`Network failure for \${event.request.url}, returning the 404 fallback.\`);
            return caches.match('/graphics-web-services-workers/404.html');
          });
      })
  );
});
`;

// Write the content to the new sw.js file inside 'dist'.
fs.writeFileSync(path.join(distDir, "sw.js"), swContent);

console.log("sw.js successfully generated with dynamic precaching paths!");
